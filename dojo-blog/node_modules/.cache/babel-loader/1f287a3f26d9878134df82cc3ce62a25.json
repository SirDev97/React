{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          throw Error(\"Could not fetch the data for that resource\");\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsLoading(false);\n        setError(null);\n      }).catch(err => {\n        setIsLoading(false);\n        setError(err.message);\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"oHNKtHcXBLfWEYHeRSlN5KEv5w0=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/mnt/c/Users/Nevin/OneDrive/Desktop/React/dojo-blog/src/useFetch.jsx"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setIsLoading","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAApB,OAAN,CAAL,CACGC,IADH,CACSC,GAAD,IAAS;AACb,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OANH,EAOGJ,IAPH,CAOSX,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAXH,EAYGW,KAZH,CAYUC,GAAD,IAAS;AACdd,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACY,GAAG,CAACC,OAAL,CAAR;AACD,OAfH;AAgBD,KAjBS,EAiBP,IAjBO,CAAV;AAmBA,WAAO,MAAMZ,SAAS,CAACa,KAAV,EAAb;AACD,GAvBQ,EAuBN,CAACpB,GAAD,CAvBM,CAAT;AAyBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA/BD;;GAAMN,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n\r\n    setTimeout(() => {\r\n      fetch(url, { signal: abortCont.signal })\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw Error(\"Could not fetch the data for that resource\");\r\n          }\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setData(data);\r\n          setIsLoading(false);\r\n          setError(null);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoading(false);\r\n          setError(err.message);\r\n        });\r\n    }, 1000);\r\n\r\n    return () => abortCont.abort();\r\n  }, [url]);\r\n\r\n  return { data, isLoading, error };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}